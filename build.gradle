plugins {
    id 'biz.aQute.bnd.builder' version '7.0.0' apply false
	id 'me.champeau.mrjar' version "0.1" apply false
}

configure(subprojects.findAll {it.name != "examples" && it.name != "tests-all"}) {
	group projectGroup
	version projectVersion
	description "$projectDescription - $name module"

	apply plugin: 'maven-publish'
	apply plugin: 'signing'
	apply plugin: 'java-library'
    apply plugin: 'biz.aQute.bnd.builder'
	apply plugin: 'jacoco'

	archivesBaseName = "nightconfig-$name"

	repositories {
		mavenCentral()
	}

	test {
		useJUnitPlatform()
		testLogging {
			showStackTraces true
			showStandardStreams true
		}
	}

	compileTestJava {
		sourceCompatibility = JavaVersion.VERSION_11
		targetCompatibility = JavaVersion.VERSION_11
	}

	javadoc {
    	options.overview = "${project.projectDir}/src/overview.html"
	}

	jacocoTestReport {
		dependsOn test
	}

	dependencies {
		testImplementation("org.junit.jupiter:junit-jupiter:$junitVersion")
	}

	jar {
		manifest {
			attributes "Automatic-Module-Name": "com.electronwill.nightconfig.${project.name}"
		}
        bundle {
            bnd("Bundle-SymbolicName": "com.electronwill.nightconfig.${project.name}",
                "-exportcontents": "com.electronwill.nightconfig.*",
                "-sources": false) // We don't want a OSGI-OPT directory in the non-sources jar
        }
  	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		archiveClassifier = 'javadoc'
		from javadoc.destinationDir
	}

	task sourcesJar(type: Jar) {
		archiveClassifier = 'sources'
		from sourceSets.main.java.srcDirs
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				artifact sourcesJar
				artifact javadocJar
				pom {
					name = "NightConfig ${project.name}".toString()
					description = project.description
					url = projectUrl
					developers {
						developer {
							id = 'TheElectronWill'
							url = 'https://github.com/TheElectronWill'
						}
					}
					licenses {
						license {
							name = projectLicense
							url = projectLicenseUrl
						}
					}
					scm {
						url = projectWebScm
						connection = projectScm
						developerConnection = projectScm
					}
				}
			}
		}
		repositories {
			maven {
				credentials {
					username ossrhUser
					password ossrhPassword
				}
				url project.version.endsWith('SNAPSHOT') ? publishSnapshotUrl : publishReleaseUrl
			}
		}
	}

	signing {
		useGpgCmd()
		required { false }
		sign publishing.publications.mavenJava
	}
}

configure(subprojects.findAll {!it.name.contains("core") && it.name != "examples" && it.name != "tests-all"}) {
	task fatJar(type: Jar) {
		archiveBaseName = archivesBaseName + '-fat'
		from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
		with jar
	}

	dependencies {
		api project(':core')
		testImplementation project(path: ':core', configuration: 'tests')
	}
}

configure(subprojects.findAll {it.name.contains("core")}) {
	/* We want to apply the multi-release jar plugin */
	apply plugin: 'me.champeau.mrjar'

	multiRelease {
		targetVersions 8, 17
	}

	/* The purpose of this code is allow the other modules
	   to use the core test classes for their tests. */

	task testJar(type: Jar, dependsOn: testClasses) {
		archiveBaseName = "test-${project.archivesBaseName}"
		from sourceSets.test.output
	}

	configurations {
		tests
	}

	artifacts {
		tests testJar
	}
}
